{"remainingRequest":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\src\\views\\envWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\src\\views\\envWatch.vue","mtime":1636556574272},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\babel.config.js","mtime":1636357460074},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"D:/untitled/Ocean-Internet-of-Things/Frontend/node_modules/@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es7.object.values\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar echarts = _interopRequireWildcard(require(\"echarts\"));\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  data: function data() {\n    return {\n      name: 'envWatch',\n      // 传感器数组\n      markerArray: [],\n      // 详细信息表格表头\n      deatileMessageprop: ['coordinate', 'height', 'temperature'],\n      deatileMessagelabel: ['坐标', '高度', '温度'],\n      // 传感器表格表头\n      sensorSearchprop: ['coordinate', 'height', 'temperature'],\n      sensorSearchlabel: ['坐标', '高度', '温度'],\n      timer: '',\n      // 定义一个定时器的变量\n      currentTime: new Date(),\n      // 获取当前时间\n      // 百度地图属性\n      center: {\n        lng: 0,\n        lat: 0\n      },\n      zoom: 3,\n      // 定义全屏状态\n      fullScreenStatus: {\n        mapEchartBox: false,\n        deatileMessageBox: false,\n        sensorSearchBox: false,\n        dataEchartBox: false\n      },\n      // 详细信息表格数据\n      tableData: [],\n      // 传感器搜索表格数据\n      sensorTableOptions: [],\n      // 区域搜索表格数据\n      //  areaTableOptions: [{\n      //   value: '选项1',\n      //   label: '黄金糕'\n      // }, ],\n      // 数字画像选项\n      dataEchartOptions: [{\n        value: 1,\n        label: '温度变化'\n      }, {\n        value: 2,\n        label: '风速变化'\n      }],\n      dataEchartValue: '',\n      sensorSearchValue: [],\n      areaSearchValue: [],\n      // echart温度变化数据\n      dataEchartOption1: {\n        xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          name: '温度℃',\n          type: 'value'\n        },\n        series: [{\n          data: [12, 16, 17, 16, 17, 18, 17],\n          type: 'line'\n        }]\n      },\n      // echart风速变化数据\n      dataEchartOption2: {\n        xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          name: '风速KM/H',\n          type: 'value'\n        },\n        series: [{\n          data: [200, 180, 250, 280, 270, 210, 300],\n          type: 'bar',\n          showBackground: true,\n          backgroundStyle: {\n            color: 'rgba(180, 180, 180, 0.2)'\n          }\n        }]\n      },\n      // 表格实时刷新数据定时器\n      tableTimer: ''\n    };\n  },\n  created: function created() {\n    // 实时时间显示\n    var that = this; // 声明一个变量指向Vue实例this，保证作用域一致\n\n    this.timer = setInterval(function () {\n      that.currentTime = // 修改数据date\n      new Date().getFullYear() + '/' + (new Date().getMonth() + 1) + '/' + new Date().getDate() + '    ' + new Date().getHours() + ':' + new Date().getMinutes() + ' ' + new Date().getSeconds();\n    }, 1000); // 请求传感器数据\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://linkworld.natapp1.cc/live/sensor');\n    xhr.send(null);\n\n    xhr.onreadystatechange = function () {\n      if (this.readyState === 4) {\n        console.log(that.deatileMessagelabel); // console.log(this.response);\n\n        var json = eval('(' + this.response + ')');\n        that.markerArray = json.data;\n        console.log('that.markerArray', that.markerArray);\n\n        for (var i = 0; i < that.markerArray.length; i++) {\n          that.markerArray[i].show = false;\n          var newSensor = {\n            id: that.markerArray[i].id,\n            label: that.markerArray[i].name\n          };\n          that.sensorTableOptions.push(newSensor);\n        } // console.log('这是渲染后的数据');\n        // console.log(that.markerArray);\n\n      }\n    };\n  },\n  mounted: function mounted() {\n    // BaiduMap组件及其所有子组件的渲染只能是异步的\n    this.changeSize('mapEchartBox');\n    this.changeSize('mapEchartBox');\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer); // 在Vue实例销毁前，清除我们的定时器\n    }\n  },\n  methods: {\n    sensorMapMarkerClick: function sensorMapMarkerClick(id) {\n      var that = this;\n      console.log('点击了传感器' + id);\n\n      for (var i = 0; i < that.markerArray.length; i++) {\n        if (that.markerArray[i].id === id) {\n          that.markerArray[i].show = true;\n        }\n      } // 清空表格数据\n\n\n      that.tableData = []; // 清除表格刷新定时器\n\n      if (this.tableTimer) {\n        clearInterval(this.tableTimer);\n      } // this.markerArray[0].show = true;\n\n\n      this.tableTimer = setInterval(function () {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', 'http://linkworld.natapp1.cc/live/sensor/data?config_id=' + id);\n        xhr.send(null);\n\n        xhr.onreadystatechange = function () {\n          if (this.readyState === 4) {\n            // console.log(this.response);\n            //  var json = eval('(' + this.response + ')');\n            var json = JSON.parse(this.response);\n            var suData = json.data; //  console.log('带id请求的数据',suData);\n\n            var suDataJson = eval('(' + suData.data + ')');\n            var suDataMean = eval('(' + suData.mean + ')'); // 获取的数据值\n\n            var suDataJsonValue = Object.values(suDataJson); //  console.log('带id请求的数据值',suDataJsonValue);\n            // 获取的数据值的key\n\n            var suDataJsonKey = Object.keys(suDataJson); // console.log('带id请求的数据值的key',suDataJsonKey);\n            // 获取表头意义的值\n            // console.log('带id请求的数据意义的值',suDataMean);\n\n            var suDataMeanValue = Object.values(suDataMean); // 获取表头意义的key\n            // console.log('带id请求的数据意义的key',suDataMeanKey);\n\n            var suDataMeanKey = Object.keys(suDataMean); // 清空表头和数据\n\n            that.deatileMessageprop = [];\n            that.deatileMessagelabel = [];\n            that.sensorSearchprop = [];\n            that.sensorSearchlabel = []; // 渲染表头\n\n            that.deatileMessageprop.push('coordinate');\n\n            for (var i = 0; i < suDataMeanValue.length; i++) {\n              that.deatileMessageprop.push(suDataMeanKey[i]);\n            }\n\n            that.deatileMessagelabel.push('坐标');\n\n            for (var i = 0; i < suDataMeanValue.length; i++) {\n              that.deatileMessagelabel.push(suDataMeanValue[i]);\n            }\n\n            that.sensorSearchprop.push('coordinate');\n\n            for (var i = 0; i < suDataMeanValue.length; i++) {\n              that.sensorSearchprop.push(suDataMeanKey[i]);\n            }\n\n            that.sensorSearchlabel.push('坐标');\n\n            for (var i = 0; i < suDataMeanValue.length; i++) {\n              that.sensorSearchlabel.push(suDataMeanValue[i]);\n            } // 渲染表格数据\n\n\n            var newTableData = {\n              coordinate: '(' + suData.longitude + ',' + suData.latitude + ')'\n            };\n            that.center.lng = suData.longitude;\n            that.center.lat = suData.latitude;\n\n            for (var i = 0; i < suDataJsonKey.length; i++) {\n              newTableData[suDataJsonKey[i]] = suDataJsonValue[i];\n            } // 将数据填入表格\n\n\n            that.tableData.unshift(newTableData);\n\n            if (that.tableData.length == 31) {\n              that.tableData.pop();\n            }\n\n            console.log(that.tableData.length);\n          }\n        };\n      }, 1000);\n    },\n    sensorMapMarkerOpen: function sensorMapMarkerOpen(id) {\n      var that = this;\n      console.log('打开了传感器' + id);\n    },\n    sensorMapMarkerClose: function sensorMapMarkerClose(id) {\n      var that = this;\n\n      for (var i = 0; i < that.markerArray.length; i++) {\n        if (that.markerArray[i].id === id) {\n          that.markerArray[i].show = false;\n        }\n      }\n\n      console.log('关闭了传感器' + id);\n    },\n    // changeAreaTable(data){\n    //   console.log(data);\n    // },\n    changeSensorTable: function changeSensorTable(data) {\n      console.log('改变了传感器', data);\n      this.sensorMapMarkerClick(data);\n      this.sensorMapMarkerOpen(data);\n    },\n    changeDataEchart: function changeDataEchart(data) {\n      console.log(data);\n\n      if (data == 1) {\n        this.initChart(this.dataEchartOption1);\n      }\n\n      if (data == 2) {\n        this.initChart(this.dataEchartOption2);\n      }\n    },\n    // 初始化地图\n    mapHandler: function mapHandler(_ref) {\n      var BMap = _ref.BMap,\n          map = _ref.map;\n      console.log(BMap, map); // 设置初始化地图定位\n      // 经度\n\n      this.center.lng = 110.297; // 纬度\n\n      this.center.lat = 21.152; // 放大倍数\n\n      this.zoom = 15;\n    },\n    changeSize: function changeSize(changeBox) {\n      this.fullScreenStatus[changeBox] = !this.fullScreenStatus[changeBox];\n      var that = this;\n      this.$nextTick(function () {\n        // this.screenAdapter();\n        // myChart1.resize();\n        console.log(that.initChart); // myChart1.clear();\n        // myChart1.setOption(option1,true);\n      });\n    },\n    handleForward: function handleForward(key, keyPath) {\n      this.$router.push('/page1');\n    },\n    initChart: function initChart(option) {\n      // 基于准备好的dom，初始化echarts实例\n      var myChart1 = echarts.init(document.getElementById('chart1')); // 获取到数据之前，显示加载动画\n\n      myChart1.showLoading(); // 获取到数据之后，隐藏加载动画\n\n      myChart1.hideLoading(); // 使用刚指定的配置项和数据显示图表。\n\n      myChart1.setOption(option); // 设置图表自适应父盒子大小\n\n      window.addEventListener('resize', function () {\n        myChart1.resize();\n      });\n    }\n  }\n};\nexports.default = _default;",null]}