{"remainingRequest":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\src\\views\\envWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\src\\views\\envWatch.vue","mtime":1636556574272},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\untitled\\Ocean-Internet-of-Things\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport * as echarts from 'echarts'\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: 'envWatch',\r\n      // 传感器数组\r\n      markerArray: [],\r\n      // 详细信息表格表头\r\n      deatileMessageprop: ['coordinate', 'height', 'temperature'],\r\n      deatileMessagelabel: ['坐标', '高度', '温度'],\r\n      // 传感器表格表头\r\n      sensorSearchprop: ['coordinate', 'height', 'temperature'],\r\n      sensorSearchlabel: ['坐标', '高度', '温度'],\r\n      timer: '', // 定义一个定时器的变量\r\n      currentTime: new Date(), // 获取当前时间\r\n      // 百度地图属性\r\n      center: { lng: 0, lat: 0 },\r\n      zoom: 3,\r\n      // 定义全屏状态\r\n      fullScreenStatus: {\r\n        mapEchartBox: false,\r\n        deatileMessageBox: false,\r\n        sensorSearchBox: false,\r\n        dataEchartBox: false\r\n      },\r\n      // 详细信息表格数据\r\n      tableData: [],\r\n      // 传感器搜索表格数据\r\n      sensorTableOptions: [],\r\n      // 区域搜索表格数据\r\n      //  areaTableOptions: [{\r\n      //   value: '选项1',\r\n      //   label: '黄金糕'\r\n      // }, ],\r\n      // 数字画像选项\r\n      dataEchartOptions: [\r\n        {\r\n          value: 1,\r\n          label: '温度变化'\r\n        }, {\r\n          value: 2,\r\n          label: '风速变化'\r\n        }],\r\n      dataEchartValue: '',\r\n      sensorSearchValue: [],\r\n      areaSearchValue: [],\r\n      // echart温度变化数据\r\n      dataEchartOption1: {\r\n        xAxis: {\r\n          type: 'category',\r\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n        },\r\n        yAxis: {\r\n          name: '温度℃',\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            data: [12, 16, 17, 16, 17, 18, 17],\r\n            type: 'line'\r\n          }\r\n        ]\r\n      },\r\n      // echart风速变化数据\r\n      dataEchartOption2: {\r\n        xAxis: {\r\n          type: 'category',\r\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n        },\r\n        yAxis: {\r\n          name: '风速KM/H',\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            data: [200, 180, 250, 280, 270, 210, 300],\r\n            type: 'bar',\r\n            showBackground: true,\r\n            backgroundStyle: {\r\n              color: 'rgba(180, 180, 180, 0.2)'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n\r\n      // 表格实时刷新数据定时器\r\n      tableTimer: ''\r\n    }\r\n  },\r\n  created() {\r\n    // 实时时间显示\r\n    var that = this // 声明一个变量指向Vue实例this，保证作用域一致\r\n    this.timer = setInterval(function() {\r\n      that.currentTime = // 修改数据date\r\n        new Date().getFullYear() +\r\n        '/' +\r\n        (new Date().getMonth() + 1) +\r\n        '/' +\r\n        new Date().getDate() +\r\n        '    ' +\r\n        new Date().getHours() +\r\n        ':' +\r\n        new Date().getMinutes() +\r\n        ' ' +\r\n        new Date().getSeconds()\r\n    }, 1000)\r\n\r\n    // 请求传感器数据\r\n    var xhr = new XMLHttpRequest()\r\n    xhr.open('GET', 'http://linkworld.natapp1.cc/live/sensor')\r\n    xhr.send(null)\r\n    xhr.onreadystatechange = function() {\r\n      if (this.readyState === 4) {\r\n        console.log(that.deatileMessagelabel)\r\n        // console.log(this.response);\r\n        var json = eval('(' + this.response + ')')\r\n        that.markerArray = json.data\r\n        console.log('that.markerArray', that.markerArray)\r\n        for (var i = 0; i < that.markerArray.length; i++) {\r\n          that.markerArray[i].show = false\r\n          const newSensor = {\r\n            id: that.markerArray[i].id,\r\n            label: that.markerArray[i].name\r\n          }\r\n          that.sensorTableOptions.push(newSensor)\r\n        }\r\n        // console.log('这是渲染后的数据');\r\n        // console.log(that.markerArray);\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // BaiduMap组件及其所有子组件的渲染只能是异步的\r\n    this.changeSize('mapEchartBox')\r\n    this.changeSize('mapEchartBox')\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer) // 在Vue实例销毁前，清除我们的定时器\r\n    }\r\n  },\r\n  methods: {\r\n    sensorMapMarkerClick(id) {\r\n      var that = this\r\n      console.log('点击了传感器' + id)\r\n      for (var i = 0; i < that.markerArray.length; i++) {\r\n        if (that.markerArray[i].id === id) {\r\n          that.markerArray[i].show = true\r\n        }\r\n      }\r\n\r\n      // 清空表格数据\r\n      that.tableData = []\r\n      // 清除表格刷新定时器\r\n      if (this.tableTimer) {\r\n        clearInterval(this.tableTimer)\r\n      }\r\n      // this.markerArray[0].show = true;\r\n      this.tableTimer = setInterval(function() {\r\n        var xhr = new XMLHttpRequest()\r\n        xhr.open('GET', 'http://linkworld.natapp1.cc/live/sensor/data?config_id=' + id)\r\n        xhr.send(null)\r\n        xhr.onreadystatechange = function() {\r\n          if (this.readyState === 4) {\r\n            // console.log(this.response);\r\n            //  var json = eval('(' + this.response + ')');\r\n            var json = JSON.parse(this.response)\r\n            var suData = json.data\r\n            //  console.log('带id请求的数据',suData);\r\n            var suDataJson = eval('(' + suData.data + ')')\r\n            var suDataMean = eval('(' + suData.mean + ')')\r\n\r\n            // 获取的数据值\r\n            var suDataJsonValue = Object.values(suDataJson)\r\n            //  console.log('带id请求的数据值',suDataJsonValue);\r\n            // 获取的数据值的key\r\n            var suDataJsonKey = Object.keys(suDataJson)\r\n            // console.log('带id请求的数据值的key',suDataJsonKey);\r\n            // 获取表头意义的值\r\n            // console.log('带id请求的数据意义的值',suDataMean);\r\n            var suDataMeanValue = Object.values(suDataMean)\r\n            // 获取表头意义的key\r\n            // console.log('带id请求的数据意义的key',suDataMeanKey);\r\n            var suDataMeanKey = Object.keys(suDataMean)\r\n            // 清空表头和数据\r\n            that.deatileMessageprop = []\r\n            that.deatileMessagelabel = []\r\n            that.sensorSearchprop = []\r\n            that.sensorSearchlabel = []\r\n            // 渲染表头\r\n            that.deatileMessageprop.push('coordinate')\r\n            for (var i = 0; i < suDataMeanValue.length; i++) {\r\n              that.deatileMessageprop.push(suDataMeanKey[i])\r\n            }\r\n            that.deatileMessagelabel.push('坐标')\r\n            for (var i = 0; i < suDataMeanValue.length; i++) {\r\n              that.deatileMessagelabel.push(suDataMeanValue[i])\r\n            }\r\n            that.sensorSearchprop.push('coordinate')\r\n            for (var i = 0; i < suDataMeanValue.length; i++) {\r\n              that.sensorSearchprop.push(suDataMeanKey[i])\r\n            }\r\n            that.sensorSearchlabel.push('坐标')\r\n            for (var i = 0; i < suDataMeanValue.length; i++) {\r\n              that.sensorSearchlabel.push(suDataMeanValue[i])\r\n            }\r\n            // 渲染表格数据\r\n            var newTableData = {\r\n              coordinate: '(' + suData.longitude + ',' + suData.latitude + ')'\r\n            }\r\n            that.center.lng = suData.longitude\r\n            that.center.lat = suData.latitude\r\n            for (var i = 0; i < suDataJsonKey.length; i++) {\r\n              newTableData[suDataJsonKey[i]] = suDataJsonValue[i]\r\n            }\r\n\r\n            // 将数据填入表格\r\n            that.tableData.unshift(newTableData)\r\n            if (that.tableData.length == 31) {\r\n              that.tableData.pop()\r\n            }\r\n            console.log(that.tableData.length)\r\n          }\r\n        }\r\n      }, 1000)\n    },\r\n    sensorMapMarkerOpen(id) {\r\n      var that = this\r\n      console.log('打开了传感器' + id)\r\n    },\r\n    sensorMapMarkerClose(id) {\r\n      var that = this\r\n      for (var i = 0; i < that.markerArray.length; i++) {\r\n        if (that.markerArray[i].id === id) {\r\n          that.markerArray[i].show = false\r\n        }\r\n      }\r\n      console.log('关闭了传感器' + id)\r\n    },\r\n\r\n    // changeAreaTable(data){\r\n    //   console.log(data);\r\n    // },\r\n    changeSensorTable(data) {\n      console.log('改变了传感器', data)\r\n      this.sensorMapMarkerClick(data)\r\n      this.sensorMapMarkerOpen(data)\r\n    },\r\n    changeDataEchart(data) {\r\n      console.log(data)\r\n      if (data == 1) {\r\n        this.initChart(this.dataEchartOption1)\r\n      }\r\n      if (data == 2) {\r\n        this.initChart(this.dataEchartOption2)\r\n      }\n    },\r\n    // 初始化地图\r\n    mapHandler({ BMap, map }) {\r\n      console.log(BMap, map)\r\n      // 设置初始化地图定位\r\n      // 经度\r\n      this.center.lng = 110.297\r\n      // 纬度\r\n      this.center.lat = 21.152\r\n      // 放大倍数\r\n      this.zoom = 15\r\n    },\r\n    changeSize(changeBox) {\r\n      this.fullScreenStatus[changeBox] = !this.fullScreenStatus[changeBox]\r\n      var that = this\r\n      this.$nextTick(() => {\r\n        // this.screenAdapter();\r\n        // myChart1.resize();\r\n        console.log(that.initChart)\r\n        // myChart1.clear();\r\n        // myChart1.setOption(option1,true);\r\n      })\r\n    },\r\n    handleForward(key, keyPath) {\r\n      this.$router.push('/page1')\r\n    },\r\n    initChart(option) {\r\n      // 基于准备好的dom，初始化echarts实例\r\n      var myChart1 = echarts.init(document.getElementById('chart1'))\r\n      // 获取到数据之前，显示加载动画\r\n      myChart1.showLoading()\r\n      // 获取到数据之后，隐藏加载动画\r\n      myChart1.hideLoading()\r\n      // 使用刚指定的配置项和数据显示图表。\r\n      myChart1.setOption(option)\r\n      // 设置图表自适应父盒子大小\r\n      window.addEventListener('resize', function() {\r\n        myChart1.resize()\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n",null]}